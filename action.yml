name: "CDK Prepare Environment"
description: "Prepares AWS CDK environment with optimized caching and minimal dependencies"
branding:
  icon: "arrow-up-circle"
  color: "blue"

inputs:
  aws-region:
    description: "Target AWS region for deployment"
    required: true
  role-to-assume:
    description: "AWS IAM role ARN to assume"
    required: true
  synth-command:
    description: "CDK synthesis command (default: npx cdk synth)"
    required: false
    default: "npx cdk synth"
  artifact-name:
    description: "Name for the deployment artifact (default: cdk-deployment-package)"
    required: false
    default: "cdk-deployment-package"
  artifact-path:
    description: "Path to store deployment files (default: deployment)"
    required: false
    default: "deployment"
  node-version:
    description: "Node.js version (default: 22)"
    required: false
    default: "22"

runs:
  using: composite
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: npm
        cache-dependency-path: package-lock.json

    - name: Install Dependencies
      shell: bash
      run: |
        npm ci \
          --foreground-scripts \
          --install-strategy=hoisted \
          --no-audit \
          --no-fund \
          --no-progress \
          --strict-peer-deps

    - name: Cache CDK artifacts
      uses: actions/cache@v4
      id: cdk-cache
      with:
        path: |
          cdk.out
          node_modules/.cache
        key: ${{ runner.os }}-cdk-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-cdk-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-cdk-

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Synthesize CDK stacks
      shell: bash
      run: |
        ${{ inputs.synth-command }} --no-version-reporting --no-path-metadata

    - name: Analyze stacks and create summary
      shell: bash
      run: |
        echo "## ðŸš€ CDK Stack Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Stacks Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stack Name | Dependencies | Region |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------------|--------|" >> $GITHUB_STEP_SUMMARY

        node -e '
          const fs = require("fs");
          const manifest = JSON.parse(fs.readFileSync("cdk.out/manifest.json", "utf8"));
          
          Object.entries(manifest.artifacts)
            .filter(([key, value]) => 
              !key.endsWith(".assets") && 
              key !== "Tree" && 
              value.type === "aws:cloudformation:stack"
            )
            .forEach(([stack, info]) => {
              const region = info.environment.match(/[^/]+$/)[0];
              const dependencies = (info.dependencies || [])
                .filter(dep => !dep.endsWith(".assets") && dep !== "Tree")
                .sort()
                .map(dep => `\`${dep}\``)
                .join(", ");
              
              const depsColumn = dependencies ? dependencies : "";
              console.log(`| \`${stack}\` | ${depsColumn} | ${region} |`);
            });
        ' >> $GITHUB_STEP_SUMMARY

    - name: Prepare deployment package
      shell: bash
      run: |
        mkdir -p ${{ inputs.artifact-path }}
        cp -r cdk.out ${{ inputs.artifact-path }}/

        node -e '
          const fs = require("fs");
          const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
          const minPkg = {
            name: pkg.name,
            version: pkg.version,
            dependencies: {
              "aws-cdk": pkg.dependencies["aws-cdk"] || pkg.devDependencies["aws-cdk"]
            }
          };
          fs.writeFileSync("${{ inputs.artifact-path }}/package.json", JSON.stringify(minPkg, null, 2));
        '

        cd ${{ inputs.artifact-path }}
        npm install \
          --foreground-scripts \
          --install-strategy=hoisted \
          --no-audit \
          --no-fund \
          --no-package-lock \
          --no-progress \
          --production \
          --strict-peer-deps

        # Clean up unnecessary files
        find node_modules -type d -name "test" -o -name "tests" -o -name "docs" -o -name "examples" | xargs rm -rf 2>/dev/null || true
        find node_modules -type f -name "*.md" -o -name "*.markdown" -o -name "*.txt" -o -name "*.map" -o -name "*.ts" -not -name "*.d.ts" | xargs rm -f 2>/dev/null || true
        find node_modules -type f -name "*.log" -o -name "*.npmignore" -o -name "*.gitignore" | xargs rm -f 2>/dev/null || true

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}
        retention-days: 1
        compression-level: 9
